[{"/Users/sergionahas/honeyhive/honeyhive/src/index.js":"1","/Users/sergionahas/honeyhive/honeyhive/src/App.js":"2","/Users/sergionahas/honeyhive/honeyhive/src/reportWebVitals.js":"3","/Users/sergionahas/honeyhive/honeyhive/src/Navbar.js":"4","/Users/sergionahas/honeyhive/honeyhive/src/Playground.js":"5","/Users/sergionahas/honeyhive/honeyhive/src/PlaygroundCompare.js":"6","/Users/sergionahas/honeyhive/honeyhive/src/TemperatureControl.js":"7","/Users/sergionahas/honeyhive/honeyhive/src/MaxToken.js":"8","/Users/sergionahas/honeyhive/honeyhive/src/ModelSelection.js":"9","/Users/sergionahas/honeyhive/honeyhive/src/StopSequence.js":"10","/Users/sergionahas/honeyhive/honeyhive/src/History.js":"11","/Users/sergionahas/honeyhive/honeyhive/src/Stream.js":"12"},{"size":535,"mtime":1684915365881,"results":"13","hashOfConfig":"14"},{"size":1609,"mtime":1685055394728,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1684823551536,"results":"16","hashOfConfig":"14"},{"size":4635,"mtime":1685065111914,"results":"17","hashOfConfig":"14"},{"size":15714,"mtime":1685066149017,"results":"18","hashOfConfig":"14"},{"size":15190,"mtime":1685065728106,"results":"19","hashOfConfig":"14"},{"size":1578,"mtime":1684891743733,"results":"20","hashOfConfig":"14"},{"size":1610,"mtime":1684892206924,"results":"21","hashOfConfig":"14"},{"size":4360,"mtime":1684903594969,"results":"22","hashOfConfig":"14"},{"size":1381,"mtime":1684897232381,"results":"23","hashOfConfig":"14"},{"size":1142,"mtime":1684916893714,"results":"24","hashOfConfig":"14"},{"size":5130,"mtime":1685058270216,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19am6xg",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/Users/sergionahas/honeyhive/honeyhive/src/index.js",[],[],"/Users/sergionahas/honeyhive/honeyhive/src/App.js",["70"],[],"import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Playground from './Playground'\nimport PlaygroundCompare from './PlaygroundCompare'\nimport History from './History'\nimport Stream from './Stream'\n\nfunction App() {\n  const [showCompare, setShowCompare] = useState(false);\n  const [apiKey, setApiKey] = useState('');\n\n  const handleButtonClick = () => {\n    setShowCompare((prevValue) => !prevValue);\n  };\n\n  const handleKeyChange = (apiKey) => {\n    setApiKey(apiKey)\n    console.log(apiKey)\n  }\n\n  const [home, setHome] = useState(true)\n  const handleHomeChange = () => {\n    setHome(home)\n    console.log(home)\n  }\n  // if home then display otherwise display History\n  return (\n    <div>\n      <Navbar onKeyChange={handleKeyChange} onHomeChange={handleHomeChange}/>\n      {home ? (\n        <div>\n          <Playground apiKey={apiKey}/>\n          <div class=\"flex justify-center items-center\">\n          <button onClick={handleButtonClick} class=\"py-2 px-5 mr-2 text-sm font-small text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-yellow-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700\">\n            {showCompare ? 'Compare Models' : 'Compare Models'}\n          </button>\n          </div>\n          {showCompare && <PlaygroundCompare apiKey={apiKey}/>}\n        </div>\n      ) : (\n        <div>\n          <History />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/sergionahas/honeyhive/honeyhive/src/reportWebVitals.js",[],[],[],"/Users/sergionahas/honeyhive/honeyhive/src/Navbar.js",["71","72","73","74","75"],[],"import React, { useEffect, useState } from 'react';\n\nconst Navbar = ({onKeyChange, onHomeChange}) => {\n    const [showInput, setShowInput] = useState(false);\n    const [apiKey, setApiKey] = useState('');\n\n    const handleClick = () => {\n      setShowInput((prevShowInput) => !prevShowInput);\n      if (document.getElementById(\"openai_key\")) {\n        setApiKey(document.getElementById(\"openai_key\").value)\n      }\n      onKeyChange(apiKey)\n    };\n\n    const handleInputChange = (event) => {\n      setApiKey(event.target.value);\n    };\n\n    const [home, setHome] = useState(true);\n\n    const handleHome = () => {\n      if (document.getElementById(\"home\").value == \"home\") {\n        setHome(true)\n      } else {\n        setHome(false)\n      }\n      onHomeChange(home)\n    };\n\n\n    return (\n      <nav class=\"bg-white border-b border-gray-100\">\n        <div class=\"mx-auto max-w-7xl px-2 sm:px-6 lg:px-8\">\n          <div class=\"relative flex h-16 items-center justify-between\">\n            <div class=\"flex flex-1 items-center justify-center sm:items-stretch sm:justify-start\">\n              <div class=\"flex flex-shrink-0 items-center\">\n              </div>\n              <div class=\"hidden sm:ml-6 sm:block\">\n                <div class=\"flex space-x-4\">\n                  <button\n                  id=\"home\"\n                  value=\"home\"\n                  onClick={handleHome}>\n                  <a href=\"/home\" class=\"text-black hover:bg-gray-100 hover:text-black rounded-lg px-3 py-2 text-sm font-medium\" aria-current=\"page\">Playground</a>\n                  </button>\n                  <button\n                  id=\"history\"\n                  value=\"history\"\n                  onClick={handleHome}>\n                  <a href=\"/history\"></a>\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div class=\"absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0\">\n            {showInput && (\n              <div>\n                <input\n                  type=\"text\"\n                  value={apiKey}\n                  onChange={handleInputChange}\n                  placeholder=\"Enter OpenAI API key\"\n                  id=\"openai_key\"\n                />\n              </div>\n            )}\n              <button\n                type=\"button\"\n                className=\"flex flex-col items-center rounded-full bg-white p-1 text-gray-400 hover:text-black focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2\"\n                onClick={handleClick}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-settings\">\n                  <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n                  <path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>\n                </svg>\n                <p class=\"text-sm\">API KEY</p>\n              </button>\n              <div class=\"relative ml-3\">\n                <div>\n                  <button type=\"button\" class=\"flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2\" id=\"user-menu-button\" aria-expanded=\"false\" aria-haspopup=\"true\">\n                    <span class=\"sr-only\">Open user menu</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"sm:hidden\" id=\"mobile-menu\">\n          <div class=\"space-y-1 px-2 pb-3 pt-2\">\n            <a href=\"#\" class=\"hover:bg-gray-100 text-black block rounded-md px-3 py-2 text-base font-medium\" aria-current=\"page\">Playground</a>\n            <a href=\"#\" class=\"hover:bg-gray-100 text-black block rounded-md px-3 py-2 text-base font-medium\">History</a>\n          </div>\n        </div>\n      </nav>\n    );\n  };\n\nexport default Navbar;\n  ","/Users/sergionahas/honeyhive/honeyhive/src/Playground.js",["76","77","78","79","80","81","82"],[],"import React, { useEffect, useState } from 'react';\nimport TemperatureSlider from './TemperatureControl';\nimport MaxToken from './MaxToken';\nimport ModelSelection from './ModelSelection';\nimport StopSequence from './StopSequence';\n\n\nconst Playground = ({apiKey}) => {\n    // Dynamic variables\n    const [userInput, setUserInput] = useState('');\n    const [variables, setVariables] = useState([]);\n    const [requestData, setRequestData] = useState([]);\n\n    useEffect(() => {\n        const textarea = document.getElementById('user-input');\n    \n        textarea.addEventListener('input', () => {\n          textarea.style.height = 'auto';\n          textarea.style.height = `${textarea.scrollHeight}px`;\n        });\n      }, []);\n\n    useEffect(() => {\n        const handleTextareaResize = (event) => {\n        const textarea = event.target;\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight}px`;\n    };\n\n    variables.forEach((variable) => {\n        const textarea = document.getElementById(variable.id);\n\n        if (textarea) {\n        textarea.addEventListener('input', handleTextareaResize);\n        }\n    });\n\n    return () => {\n        variables.forEach((variable) => {\n        const textarea = document.getElementById(variable.id);\n\n        if (textarea) {\n            textarea.removeEventListener('input', handleTextareaResize);\n        }\n        });\n    };\n    }, [variables]);\n\n    const checkVariables = () => {\n    const variableRegex = /{{([^}]+)}}/g;\n    const matches = userInput.match(variableRegex);\n\n    if (matches) {\n        const variableNames = matches.map((match) =>\n        match.replace(/{{|}}/g, '').trim()\n        );\n        const newVariables = variableNames.map((variableName, index) => ({\n        id: `variable-${index}`,\n        name: variableName,\n        }));\n        setVariables(newVariables);\n    } else {\n        setVariables([]);\n    }\n    };\n      \n    \n    // Function to handle user input changes\n    const handleInputChange = (event) => {\n        setUserInput(event.target.value);\n      };\n    \n      useEffect(() => {\n        checkVariables();\n      }, [userInput]);\n\n    const [error, setError] = useState(null);\n    \n    // Get current Model\n    var [selectedModel, setSelectedModel] = useState(null);\n    const handleModelChange = (model) => {\n        // Access the selected model value here\n        console.log(model);\n        setSelectedModel(model)\n      };\n    // Get current Temperature\n    var [selectedTemperature, setSelectedTemperature] = useState(1);\n    const handleTemperatureChange = (temperature) => {\n        console.log(temperature)\n        setSelectedTemperature(temperature)\n\n    }\n\n    // Get current MaxToken\n    var [selectedMaxToken, setSelectedMaxToken] = useState(200);\n    const handleMaxTokenChange = (MaxToken) => {\n        console.log(MaxToken)\n        setSelectedMaxToken(MaxToken)\n\n    }\n\n    // Get current stop sequence\n    var [selectedStopSequence, setSelectedStopSequence] = useState(null)\n    const handleStopSequenceChange = (StopSequence) => {\n        console.log(StopSequence)\n        setSelectedStopSequence(StopSequence)\n    }\n\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState(null);\n    const [stream, setStream] = useState([\"\"])\n\n    let controller = null; // Store the AbortController instance\n    let tmpResponse = \"\"; //initiate as empty string\n    const resultText = document.getElementById(\"stream\");\n\n    const makeRequest = async () => {\n        setError(null);\n        const url = 'https://api.openai.com//v1/chat/completions';\n\n        controller = new AbortController();\n        const signal = controller.signal;\n        tmpResponse = \"\"; //reset to empty string\n        var contents = []\n\n      \n        try {\n          const userInput = document.getElementById('user-input').value;\n          const model = selectedModel || 'gpt-3.5-turbo'; //default to 'gpt-3.5-turbo'\n          const temperature = parseFloat(selectedTemperature) || 1;\n          const tokens = parseFloat(selectedMaxToken) || 200;\n          const stopSequence = selectedStopSequence || null;\n        //   const resultText = document.getElementById(\"stream-output\");\n      \n          const variableValues = variables.map((variable) => {\n            const textarea = document.getElementById(variable.id);\n            return textarea.value;\n          });\n      \n          // Replace variables in userInput\n          let modifiedUserInput = userInput;\n          variables.forEach((variable, index) => {\n            const regex = new RegExp(`{{${variable.name}}}`, 'g');\n            modifiedUserInput = modifiedUserInput.replace(regex, variableValues[index]);\n          });\n      \n          console.log(apiKey);\n          console.log(modifiedUserInput, model, temperature, tokens, stopSequence, apiKey);\n      \n          var combinedMessages = [];\n      \n          for (let i = requestData.length - 1; i >= 0; i--) {\n            combinedMessages.push({\n              role: 'assistant',\n              content: requestData[i].tmpResponse\n            });\n      \n            combinedMessages.push({\n              role: 'user',\n              content: requestData[i].modifiedUserInput\n            });\n          }\n      \n          combinedMessages.push({\n            role: 'user',\n            content: modifiedUserInput\n          });\n      \n          console.log(modifiedUserInput);\n          console.log(combinedMessages);\n      \n        //   setLoading(true);\n      \n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n              model: model,\n              messages: combinedMessages,\n              max_tokens: tokens,\n              temperature: temperature,\n              stop: stopSequence,\n              stream: true,\n            }),\n            signal, // Pass the signal to the fetch request\n          });\n      \n          const reader = response.body.getReader();\n          const decoder = new TextDecoder(\"utf-8\");\n          resultText.innerText = \"\";\n      \n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n      \n            const chunk = decoder.decode(value);\n            const lines = chunk.split(\"\\n\");\n            console.log(lines)\n            const parsedLines = lines\n                .map((line) => line.replace(/^data: /, \"\").trim()) // Remove 'data' at the beginning and trim whitespace\n                .filter((line) => line !== \"\" && line !== \"[DONE]\") // Filter out empty lines and lines with \"[DONE]\"\n                .map((line) => JSON.parse(line)); // Parse the JSON string\n\n            // Now you have an array of parsed JSON objects in 'parsedLines'\n            console.log(parsedLines)\n\n            for (const parsedLine of parsedLines) {\n              const { choices } = parsedLine;\n              const { delta } = choices[0];\n              const { content } = delta;\n              // Update the UI with the new content\n              console.log(\"Test Reached\")\n              console.log(content)\n              if (content) {\n                console.log(\"OK\")\n                console.log(content)\n                resultText.innerText += content;\n                tmpResponse += content\n                // setStream(prevData => [...prevData, content])\n              }\n              \n            }\n        }\n\n            console.log(\"tmpResponse\")\n            console.log(tmpResponse)\n            var timeStamp = new Date().toLocaleString();\n            \n                \n            // Create a new request object\n            const request = {\n                modifiedUserInput,\n                model,\n                temperature,\n                tokens,\n                stopSequence,\n                tmpResponse,\n                timeStamp,\n            };\n            \n            console.log(request)\n            // Append the request object to the requestData array\n            setRequestData(prevData => [...prevData, request]);\n\n    } catch (error) {\n        console.log(\"error l.258\", error)\n      // Handle fetch request errors\n      if (signal.aborted) {\n        resultText.innerText += \". [ABORTED]\";\n      } else {\n        resultText.innerText = \"Error occurred while generating.\";\n      }\n    } finally {\n      // Enable the generate button and disable the stop button\n      controller = null; // Reset the AbortController instance\n    }\n  };\n  \n//   const stop = () => {\n//     // Abort the fetch request by calling abort() on the AbortController instance\n//     if (controller) {\n//       controller.abort();\n//       controller = null;\n//     }\n//   };      \n      \n    \n    return (\n        <div className=\"text-black text-lg bg-white\">\n            <div class=\"container mx-auto p-4\">\n                <div class=\"flex\">\n                    <div class=\"w-5/12 pr-2\">\n                        <div class=\"bg-white p-4\">\n                        <h2 class=\"text-xl font-bold mb-2\">\n                            User Input\n                        </h2>\n                        <div class=\"w-full max-w mx-auto\">\n                            <div class=\"relative\">\n                                <textarea class=\"w-full px-4 py-2 pr-10 leading-tight bg-white border border-gray-300 rounded-md shadow-md focus:outline-none focus:shadow-outline h-auto resize-none overflow-hidden text-sm\" placeholder=\"Enter input... Place variables between {{ }}\" id=\"user-input\" onChange={handleInputChange}></textarea>\n                                <button class=\"absolute inset-y-0 right-0 px-3 py-2 text-gray-500\" onClick={makeRequest}>\n                                <svg fill=\"#fcc01d\" height=\"20px\" width=\"50px\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 459 459\" xmlSpace=\"preserve\" stroke=\"#fcc01d\">\n                                <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n                                <g id=\"SVGRepo_tracerCarrier\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></g>\n                                <g id=\"SVGRepo_iconCarrier\">\n                                    <g>\n                                    <g>\n                                        <path d=\"M229.5,0C102.751,0,0,102.751,0,229.5S102.751,459,229.5,459S459,356.249,459,229.5S356.249,0,229.5,0z M310.292,239.651 l-111.764,76.084c-3.761,2.56-8.63,2.831-12.652,0.704c-4.022-2.128-6.538-6.305-6.538-10.855V153.416 c0-4.55,2.516-8.727,6.538-10.855c4.022-2.127,8.891-1.857,12.652,0.704l111.764,76.084c3.359,2.287,5.37,6.087,5.37,10.151 C315.662,233.564,313.652,237.364,310.292,239.651z\"></path>\n                                    </g>\n                                    </g>\n                                </g>\n                                </svg>\n                                <p class=\"text-sm\">Run</p>\n                                </button>\n                            </div>\n                        </div>\n                        <p class=\"pt-2\">Variables</p>\n                        <div className=\"flex flex-wrap pt-3\">\n                            {variables.map((variable) => (\n                            <div className=\"mr-4 text-center\" key={variable.id}>\n                                <textarea\n                                id={variable.id}\n                                className=\"w-full bg-white border border-gray-300 rounded-md shadow-md focus:outline-none focus:shadow-outline h-auto resize-none overflow-hidden text-sm\"\n                                rows=\"1\"\n                                placeholder=\"\"\n                                ></textarea>\n                                <p className=\"text-xs mt-1\">{variable.name}</p>\n                            </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"w-2/12\">\n                <div className=\"flex flex-col items-center h-full border-l border-r border-gray-400\">\n                    <p className=\"text-center font-bold\">Model Tuning</p>\n                    <div className=\"flex flex-col justify-center items-center w-full pt-4\">\n                    <ModelSelection onModelChange={handleModelChange}/>\n                    <div className=\"pt-5\">\n                        <TemperatureSlider onTemperatureChange={handleTemperatureChange} compare={\"false\"}/>\n                    </div>\n                    <div className=\"pt-5\">\n                        <MaxToken onMaxTokenChange={handleMaxTokenChange} compare={\"false\"}/>\n                    </div>\n                    <div className=\"pt-5\">\n                        <StopSequence onStopSequenceChange={handleStopSequenceChange} compare={\"false\"}/>\n                    </div>\n                    </div>\n                </div>\n                </div>\n                <div class=\"w-5/12 pl-2\">\n                    <div class=\"p-4\">\n                        <h2 class=\"text-xl font-bold mb-2\">Model Output</h2>\n                        <div>\n                            {loading ? (\n                                <div className=\"\">\n                                    <p className=\"\">Loading...</p>\n                                </div>\n                            ) : (\n                                <div className=\"\">\n                                </div>\n                            )}\n                        </div>\n                        <div style={{ maxHeight: '300px', overflowY: 'scroll' }}>\n                            <div className=\"mb-4\">\n                            </div>\n                            <div id=\"resultContainer\">\n                                <p id=\"stream\" class=\"whitespace-pre-line text-sm\"></p>\n                            </div>\n                            <br></br>\n                            <hr className=\"w-180 border-t-2 border-gray-900\"></hr>\n                            <br></br>\n                            <h2 class=\"text-xl font-bold mb-2\">Recent</h2>\n                            {requestData.slice().reverse().map((request, index) => (\n                                <div key={index} className=\"mb-4\">\n                                    <p className=\"text-sm\">Time: {request.timeStamp}</p>\n                                    <p className=\"text-sm\">Model: {request.model}</p>\n                                    <p className=\"text-sm\">Temperature: {request.temperature}</p>\n                                    <p className=\"text-sm\">Tokens: {request.tokens}</p>\n                                    <p className=\"text-sm\">Stop Sequence: {request.stopSequence}</p>\n                                    <br></br>\n                                    <p className=\"text-sm\">\n                                        <span className=\"font-bold\">User:</span> {request.modifiedUserInput}\n                                    </p>\n                                    <br></br>\n                                    <p className=\"text-sm\">\n                                        <span className=\"font-bold\">{request.model}:</span> {request.tmpResponse}\n                                    </p>\n                                    <br></br>\n                                    <hr className=\"w-180 border-t border-gray-400\"></hr>\n                                </div>\n                            ))}\n                        </div>\n                        {error && <div>{error}</div>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    );\n};\n\n\nexport default Playground;","/Users/sergionahas/honeyhive/honeyhive/src/PlaygroundCompare.js",["83","84","85","86","87","88","89"],[],"import React, { useEffect, useState } from 'react';\nimport TemperatureSlider from './TemperatureControl';\nimport MaxToken from './MaxToken';\nimport ModelSelection from './ModelSelection';\nimport StopSequence from './StopSequence'\n\n\nconst Playground = ({apiKey}) => {\n    // Dynamic variables\n    const [userInput, setUserInput] = useState('');\n    const [variables, setVariables] = useState([]);\n    const [requestData, setRequestData] = useState([]);\n\n    useEffect(() => {\n        const textarea = document.getElementById('user-input-compare');\n    \n        textarea.addEventListener('input', () => {\n          textarea.style.height = 'auto';\n          textarea.style.height = `${textarea.scrollHeight}px`;\n        });\n      }, []);\n\n    useEffect(() => {\n        const handleTextareaResize = (event) => {\n        const textarea = event.target;\n        textarea.style.height = 'auto';\n        textarea.style.height = `${textarea.scrollHeight}px`;\n    };\n\n    variables.forEach((variable) => {\n        const textarea = document.getElementById(variable.id);\n\n        if (textarea) {\n        textarea.addEventListener('input', handleTextareaResize);\n        }\n    });\n\n    return () => {\n        variables.forEach((variable) => {\n        const textarea = document.getElementById(variable.id);\n\n        if (textarea) {\n            textarea.removeEventListener('input', handleTextareaResize);\n        }\n        });\n    };\n    }, [variables]);\n\n    const checkVariables = () => {\n    const variableRegex = /{{([^}]+)}}/g;\n    const matches = userInput.match(variableRegex);\n\n    if (matches) {\n        const variableNames = matches.map((match) =>\n        match.replace(/{{|}}/g, '').trim()\n        );\n        const newVariables = variableNames.map((variableName, index) => ({\n        id: `variable-compare-${index}`,\n        name: variableName,\n        }));\n        setVariables(newVariables);\n    } else {\n        setVariables([]);\n    }\n    };\n      \n    \n    // Function to handle user input changes\n    const handleInputChange = (event) => {\n        setUserInput(event.target.value);\n      };\n    \n      useEffect(() => {\n        checkVariables();\n      }, [userInput]);\n\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(null);\n    \n    // Get current Model\n    var [selectedModel, setSelectedModel] = useState(null);\n    const handleModelChange = (model) => {\n        // Access the selected model value here\n        console.log(model);\n        setSelectedModel(model)\n      };\n    // Get current Temperature\n    var [selectedTemperature, setSelectedTemperature] = useState(1);\n    const handleTemperatureChange = (temperature) => {\n        console.log(temperature)\n        setSelectedTemperature(temperature)\n    }\n\n    // Get current MaxToken\n    var [selectedMaxToken, setSelectedMaxToken] = useState(200);\n    const handleMaxTokenChange = (MaxToken) => {\n        console.log(MaxToken)\n        setSelectedMaxToken(MaxToken)\n\n    }\n\n    // Get current stop sequence\n    var [selectedStopSequence, setSelectedStopSequence] = useState(null)\n    const handleStopSequenceChange = (StopSequence) => {\n        console.log(StopSequence)\n        setSelectedStopSequence(StopSequence)\n    }\n\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState(null);\n\n    let controller = null;\n    let tmpResponse = \"\"\n    const resultText = document.getElementById(\"stream-compare\")\n\n    const makeRequest = async () => {\n        setError(null)\n        const url = 'https://api.openai.com//v1/chat/completions';\n\n        controller = new AbortController();\n        const signal = controller.signal;\n        tmpResponse = \"\"; //reset to empty string\n        var contents = []\n      \n        try {\n          const userInput = document.getElementById('user-input-compare').value;\n          const model = selectedModel || 'gpt-3.5-turbo'; //default to 'gpt-3.5-turbo'\n          const temperature = parseFloat(selectedTemperature) || 1;\n          const tokens = parseFloat(selectedMaxToken) || 200;\n          const stopSequence = selectedStopSequence || null;\n      \n          const variableValues = variables.map((variable) => {\n            const textarea = document.getElementById(variable.id);\n            return textarea.value;\n          });\n      \n          // Replace variables in userInput\n          let modifiedUserInput = userInput;\n          variables.forEach((variable, index) => {\n            const regex = new RegExp(`{{${variable.name}}}`, 'g');\n            modifiedUserInput = modifiedUserInput.replace(regex, variableValues[index]);\n          });\n          \n          console.log(apiKey)\n          console.log(modifiedUserInput, model, temperature, tokens, stopSequence, apiKey);\n\n          var combinedMessages = [];\n\n            for (let i = requestData.length-1; i >= 0; i--) {\n\n                combinedMessages.push({\n                    role: 'assistant',\n                    content: requestData[i].tmpResponse\n                });\n\n                combinedMessages.push({\n                    role: 'user',\n                    content: requestData[i].modifiedUserInput\n                  });\n            }\n\n            combinedMessages.push({\n                role: 'user',\n                content: modifiedUserInput\n            });\n\n            console.log(modifiedUserInput)\n\n            console.log(combinedMessages)\n\n            // setLoading(true);\n\n      \n          const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${apiKey}`\n            },\n            body: JSON.stringify({\n              model: model,\n              messages: combinedMessages,\n              max_tokens: tokens,\n              temperature: temperature,\n              stop: stopSequence,\n              stream: true,\n            }),\n            signal,\n          });\n\n        //   setLoading(false);\n\n        const reader = response.body.getReader();\n          const decoder = new TextDecoder(\"utf-8\");\n          resultText.innerText = \"\";\n      \n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n      \n            const chunk = decoder.decode(value);\n            const lines = chunk.split(\"\\n\");\n            const parsedLines = lines\n                .map((line) => line.replace(/^data: /, \"\").trim()) // Remove 'data' at the beginning and trim whitespace\n                .filter((line) => line !== \"\" && line !== \"[DONE]\") // Filter out empty lines and lines with \"[DONE]\"\n                .map((line) => JSON.parse(line)); // Parse the JSON string\n\n            // Now you have an array of parsed JSON objects in 'parsedLines'\n            console.log(parsedLines)\n\n            for (const parsedLine of parsedLines) {\n              const { choices } = parsedLine;\n              const { delta } = choices[0];\n              const { content } = delta;\n              // Update the UI with the new content\n              console.log(\"Test Reached\")\n              console.log(content)\n              if (content) {\n                console.log(\"OK\")\n                console.log(content)\n                resultText.innerText += content;\n                tmpResponse += content\n                // setStream(prevData => [...prevData, content])\n              }\n              \n            }\n        }\n\n        console.log(\"tmpResponse\")\n            console.log(tmpResponse)\n      \n      \n          // Create a new request object\n          const request = {\n            modifiedUserInput,\n            model,\n            temperature,\n            tokens,\n            stopSequence,\n            tmpResponse,\n          };\n      \n          // Append the request object to the requestData array\n          setRequestData(prevData => [...prevData, request]);\n        } catch (error) {\n            console.log(\"error l.258\", error)\n            // Handle fetch request errors\n            if (signal.aborted) {\n              resultText.innerText += \". [ABORTED]\";\n            } else {\n              resultText.innerText = \"Error occurred while generating.\";\n            }\n          } finally {\n            // Enable the generate button and disable the stop button\n            controller = null; // Reset the AbortController instance\n        }\n      };\n      \n      \n    \n    return (\n        <div className=\"text-black text-lg bg-white\">\n            <div class=\"container mx-auto p-4\">\n                <div class=\"flex\">\n                    <div class=\"w-5/12 pr-2\">\n                        <div class=\"bg-white p-4\">\n                        <h2 class=\"text-xl font-bold mb-2\">\n                            User Input\n                        </h2>\n                        <div class=\"w-full max-w mx-auto\">\n                            <div class=\"relative\">\n                                <textarea class=\"w-full px-4 py-2 pr-10 leading-tight bg-white border border-gray-300 rounded-md shadow-md focus:outline-none focus:shadow-outline h-auto resize-none overflow-hidden text-sm\" placeholder=\"Enter input... Place variables between {{ }}\" id=\"user-input-compare\" onChange={handleInputChange}></textarea>\n                                <button class=\"absolute inset-y-0 right-0 px-3 py-2 text-gray-500\" onClick={makeRequest}>\n                                <svg fill=\"#fcc01d\" height=\"20px\" width=\"50px\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 459 459\" xmlSpace=\"preserve\" stroke=\"#fcc01d\">\n                                <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n                                <g id=\"SVGRepo_tracerCarrier\" strokeLinecap=\"round\" strokeLinejoin=\"round\"></g>\n                                <g id=\"SVGRepo_iconCarrier\">\n                                    <g>\n                                    <g>\n                                        <path d=\"M229.5,0C102.751,0,0,102.751,0,229.5S102.751,459,229.5,459S459,356.249,459,229.5S356.249,0,229.5,0z M310.292,239.651 l-111.764,76.084c-3.761,2.56-8.63,2.831-12.652,0.704c-4.022-2.128-6.538-6.305-6.538-10.855V153.416 c0-4.55,2.516-8.727,6.538-10.855c4.022-2.127,8.891-1.857,12.652,0.704l111.764,76.084c3.359,2.287,5.37,6.087,5.37,10.151 C315.662,233.564,313.652,237.364,310.292,239.651z\"></path>\n                                    </g>\n                                    </g>\n                                </g>\n                                </svg>\n                                <p class=\"text-sm\">Run</p>\n                                </button>\n                            </div>\n                        </div>\n                        <p class=\"pt-2\">Variables</p>\n                        <div className=\"flex flex-wrap pt-3\">\n                            {variables.map((variable) => (\n                            <div className=\"mr-4 text-center\" key={variable.id}>\n                                <textarea\n                                id={variable.id}\n                                className=\"w-full bg-white border border-gray-300 rounded-md shadow-md focus:outline-none focus:shadow-outline h-auto resize-none overflow-hidden text-sm\"\n                                rows=\"1\"\n                                placeholder=\"\"\n                                ></textarea>\n                                <p className=\"text-xs mt-1\">{variable.name}</p>\n                            </div>\n                            ))}\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"w-2/12\">\n                <div className=\"flex flex-col items-center h-full border-l border-r border-gray-400\">\n                    <p className=\"text-center font-bold\">Model Tuning</p>\n                    <div className=\"flex flex-col justify-center items-center w-full pt-4\">\n                    <ModelSelection onModelChange={handleModelChange}/>\n                    <div className=\"pt-5\">\n                        <TemperatureSlider onTemperatureChange={handleTemperatureChange} compare={\"true\"}/>\n                    </div>\n                    <div className=\"pt-5\">\n                        <MaxToken onMaxTokenChange={handleMaxTokenChange} compare={\"true\"}/>\n                    </div>\n                    <div className=\"pt-5\">\n                        <StopSequence onStopSequenceChange={handleStopSequenceChange} compare={\"true\"}/>\n                    </div>\n                    </div>\n                </div>\n                </div>\n                <div class=\"w-5/12 pl-2\">\n                    <div class=\"p-4\">\n                        <h2 class=\"text-xl font-bold mb-2\">Model Output</h2>\n                        <div>\n                            {loading ? (\n                                <div className=\"\">\n                                    <p className=\"\">Loading...</p>\n                                </div>\n                            ) : (\n                                <div className=\"\">\n                                </div>\n                            )}\n                        </div>\n                        <div style={{ maxHeight: '300px', overflowY: 'scroll' }}>\n                        <div className=\"mb-4\">\n                            </div>\n                            <div id=\"resultContainer\">\n                                <p id=\"stream-compare\" class=\"whitespace-pre-line text-sm\"></p>\n                            </div>\n                            <br></br>\n                            <hr className=\"w-180 border-t-2 border-gray-900\"></hr>\n                            <br></br>\n                            <h2 class=\"text-xl font-bold mb-2\">Recent</h2>\n                            {requestData.slice().reverse().map((request, index) => (\n                                <div key={index} className=\"mb-4\">\n                                    <p className=\"text-sm\">Model: {request.model}</p>\n                                    <p className=\"text-sm\">Temperature: {request.temperature}</p>\n                                    <p className=\"text-sm\">Tokens: {request.tokens}</p>\n                                    <p className=\"text-sm\">Stop Sequence: {request.stopSequence}</p>\n                                    <br></br>\n                                    <p className=\"text-sm\">\n                                        <span className=\"font-bold\">User:</span> {request.modifiedUserInput}\n                                    </p>\n                                    <br></br>\n                                    <p className=\"text-sm\">\n                                        <span className=\"font-bold\">{request.model}:</span> {request.tmpResponse}\n                                    </p>\n                                    <br></br>\n                                    <hr className=\"w-180 border-t border-gray-400\"></hr>\n                                </div>\n                            ))}\n                        </div>\n                        {error && <div>{error}</div>}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    );\n};\n\n\nexport default Playground;","/Users/sergionahas/honeyhive/honeyhive/src/TemperatureControl.js",[],[],"/Users/sergionahas/honeyhive/honeyhive/src/MaxToken.js",[],[],"/Users/sergionahas/honeyhive/honeyhive/src/ModelSelection.js",["90","91","92","93"],[],"import React, { useState, useEffect } from 'react';\n\nfunction ModelSelection({ onModelChange}) {\n  const [selectedModel, setSelectedModel] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\n\n  const handleModelChange = (model) => {\n    setSelectedModel(model);\n    setIsOpen(false);\n    console.log(model)\n    onModelChange(model);\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleScreenSizeChange = () => {\n    const isSmall = window.innerWidth < 768; // Adjust the breakpoint as needed\n    setIsSmallScreen(isSmall);\n  };\n\n  React.useEffect(() => {\n    handleScreenSizeChange();\n    window.addEventListener('resize', handleScreenSizeChange);\n    return () => {\n      window.removeEventListener('resize', handleScreenSizeChange);\n    };\n  }, []);\n\n\n  return (\n    <div className=\"relative\">\n      <button \n        className=\"flex items-center whitespace-nowrap rounded bg-neutral-50 px-6 py-2.5 text-xs font-medium uppercase leading-normal text-neutral-800 shadow-[0_4px_9px_-4px_#fbfbfb] transition duration-150 ease-in-out hover:bg-neutral-100 hover:shadow-[0_8px_9px_-4px_rgba(251,251,251,0.3),0_4px_18px_0_rgba(251,251,251,0.2)] focus:bg-neutral-100 focus:shadow-[0_8px_9px_-4px_rgba(251,251,251,0.3),0_4px_18px_0_rgba(251,251,251,0.2)] focus:outline-none focus:ring-0 active:bg-neutral-200 active:shadow-[0_8px_9px_-4px_rgba(251,251,251,0.3),0_4px_18px_0_rgba(251,251,251,0.2)] motion-reduce:transition-none relative\"\n        type=\"button\"\n        id=\"dropdownMenuButton9\"\n        aria-expanded={isOpen}\n        onClick={toggleDropdown}\n        value={selectedModel}\n      >\n        {!isSmallScreen && (\n          <span className=\"ml-2\">\n            {selectedModel || 'Select Model'}\n          </span>\n        )}\n\n        <span className=\"w-2\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n            className=\"h-5 w-5\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        </span>\n      </button>\n      {isOpen && (\n        <ul className=\"absolute z-[1000] float-left m-0 min-w-max list-none overflow-hidden rounded-lg border-none bg-white bg-clip-padding text-left text-base shadow-lg dark:bg-neutral-700\">\n          <li>\n            <a\n              className={`block w-full whitespace-nowrap bg-transparent px-4 py-2 text-sm font-normal ${\n                selectedModel === 'gpt-4' ? 'text-primary-500' : 'text-neutral-700'\n              } hover:bg-neutral-100 active:text-neutral-800 active:no-underline disabled:pointer-events-none disabled:bg-transparent disabled:text-neutral-400 dark:text-neutral-200 dark:hover:bg-neutral-600`}\n              href=\"#\"\n              onClick={() => handleModelChange('gpt-4')}>\n              gpt-4\n            </a>\n          </li>\n          <li>\n            <a\n              className={`block w-full whitespace-nowrap bg-transparent px-4 py-2 text-sm font-normal ${\n                selectedModel === 'gpt-3.5-turbo' ? 'text-primary-500' : 'text-neutral-700'\n              } hover:bg-neutral-100 active:text-neutral-800 active:no-underline disabled:pointer-events-none disabled:bg-transparent disabled:text-neutral-400 dark:text-neutral-200 dark:hover:bg-neutral-600`}\n              href=\"#\"\n              onClick={() => handleModelChange('gpt-3.5-turbo')}>\n              gpt-3.5-turbo\n            </a>\n          </li>\n          <li>\n            <a\n              className={`block w-full whitespace-nowrap bg-transparent px-4 py-2 text-sm font-normal ${\n                selectedModel === 'gpt-3.5-turbo-0301' ? 'text-primary-500' : 'text-neutral-700'\n              } hover:bg-neutral-100 active:text-neutral-800 active:no-underline disabled:pointer-events-none disabled:bg-transparent disabled:text-neutral-400 dark:text-neutral-200 dark:hover:bg-neutral-600`}\n              href=\"#\"\n              onClick={() => handleModelChange('gpt-3.5-turbo-0301')}>\n            gpt-3.5-turbo-0301\n            </a>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default ModelSelection;\n","/Users/sergionahas/honeyhive/honeyhive/src/StopSequence.js",["94","95"],[],"import { useState, useEffect } from 'react';\nimport './StopSequence.css';\n\nexport default function StopSequence({onStopSequenceChange, compare}) {\n  const [stopsequence, setStopSequence] = useState(null); // Initial temperature value\n\n  const handleStopSequenceChange = (event) => {\n    setStopSequence(event.target.value);\n    var stopsequence = document.getElementById(`stopsequence-${compare}`).value\n    onStopSequenceChange(stopsequence);\n  };\n\n  useEffect(() => {\n    const textarea = document.getElementById(`stopsequence-${compare}`);\n\n    textarea.addEventListener('input', () => {\n      textarea.style.height = 'auto';\n      textarea.style.height = `${textarea.scrollHeight}px`;\n    });\n  }, []);\n\n  const stopsequenceId = `stopsequence-${compare}`;\n\n  return (\n    <div class=\"text-center\">\n        <div class=\"relative pr-2 pl-2\">\n        <textarea class=\" w-full px-4 py-2 pr-10 leading-tight bg-white border border-gray-300 rounded-md shadow-md focus:outline-none focus:shadow-outline h-auto resize-none overflow-hidden text-sm\" placeholder=\"Stop Sequence\" id={stopsequenceId}></textarea>\n        <button class=\"absolute inset-y-0 right-0 px-1 text-yellow-500\" onClick={handleStopSequenceChange}>\n          <p className=\"text-sm font-bold text-yellow pb-2 pr-2\">Save</p>\n        </button>\n        </div>\n        <p class=\"text-sm\">Stop Sequence</p>\n    </div>\n  );\n}\n","/Users/sergionahas/honeyhive/honeyhive/src/History.js",[],[],"/Users/sergionahas/honeyhive/honeyhive/src/Stream.js",["96","97","98"],[],"import React, { useEffect, useState } from 'react';\n\nconst Stream = () => {\n    const API_URL = \"https://api.openai.com/v1/chat/completions\";\n    const API_KEY = \"\";\n\n    const promptInput = document.getElementById(\"promptInput\"); // equivalent of 'user-input'\n    const generateBtn = document.getElementById(\"generateBtn\");\n    const stopBtn = document.getElementById(\"stopBtn\");\n    const resultText = document.getElementById(\"resultText\");\n\n    const [input, setInput] = useState('')\n\n    const handleInputChange = (event) => {\n        setInput(event.target.value);\n      };\n\n    let controller = null; // Store the AbortController instance\n\n    const generate = async () => {\n    // Alert the user if no prompt value\n    if (!input) {\n        alert(\"Please enter a prompt.\");\n        return;\n    }\n\n    // Disable the generate button and enable the stop button\n    // generateBtn.disabled = true;\n    // stopBtn.disabled = false;\n    resultText.innerText = \"Generating...\";\n\n    // Create a new AbortController instance\n    controller = new AbortController();\n    const signal = controller.signal;\n\n    try {\n        // Fetch the response from the OpenAI API with the signal from AbortController\n        const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${API_KEY}`,\n        },\n        body: JSON.stringify({\n            model: \"gpt-3.5-turbo\",\n            messages: [{ role: \"user\", content: promptInput.value }],\n            max_tokens: 100,\n            stream: true, // For streaming responses\n        }),\n        signal, // Pass the signal to the fetch request\n        });\n\n        // Read the response as a stream of data\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder(\"utf-8\");\n        resultText.innerText = \"\";\n\n        while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        // Massage and parse the chunk of data\n        const chunk = decoder.decode(value);\n        const lines = chunk.split(\"\\n\");\n        const parsedLines = lines\n            .map((line) => line.replace(/^data: /, \"\").trim()) // Remove the \"data: \" prefix\n            .filter((line) => line !== \"\" && line !== \"[DONE]\") // Remove empty lines and \"[DONE]\"\n            .map((line) => JSON.parse(line)); // Parse the JSON string\n\n        for (const parsedLine of parsedLines) {\n            const { choices } = parsedLine;\n            const { delta } = choices[0];\n            const { content } = delta;\n            // Update the UI with the new content\n            if (content) {\n            resultText.innerText += content;\n            }\n        }\n        }\n    } catch (error) {\n        // Handle fetch request errors\n        if (signal.aborted) {\n        resultText.innerText += \". [ABORTED]\";\n        } else {\n        console.error(\"Error:\", error);\n        resultText.innerText = \"Error occurred while generating.\";\n        }\n    } finally {\n        // Enable the generate button and disable the stop button\n        // generateBtn.disabled = false;\n        // stopBtn.disabled = true;\n        controller = null; // Reset the AbortController instance\n    }\n    };\n\n    const stop = () => {\n    // Abort the fetch request by calling abort() on the AbortController instance\n    if (controller) {\n        controller.abort();\n        controller = null;\n    }\n    };\n\n    // console.log(\"Before promptInput\")\n    // promptInput.onKeyUp = (event) => {\n    //     if (event.key === \"Enter\") {\n    //         generate();\n    //     }\n    // };\n    // generateBtn.onClick = generate;\n    // stopBtn.onClick = stop;\n\n    return (\n        <div class=\"lg:w-1/2 2xl:w-1/3 p-8 rounded-md bg-gray-100\">\n        <h1 class=\"text-3xl font-bold mb-6\">\n            Streaming OpenAI API Completions in JavaScript\n        </h1>\n        <div id=\"resultContainer\" class=\"mt-4 h-48 overflow-y-auto\">\n            <p class=\"text-gray-500 text-sm mb-2\">Generated Text</p>\n            <p id=\"resultText\" class=\"whitespace-pre-line\"></p>\n        </div>\n        <input\n            type=\"text\"\n            id=\"promptInput\"\n            class=\"w-full px-4 py-2 rounded-md bg-gray-200 placeholder-gray-500 focus:outline-none mt-4\"\n            placeholder=\"Enter prompt...\"\n            onChange={handleInputChange}\n        />\n        <div class=\"flex justify-center mt-4\">\n            <button\n            id=\"generateBtn\"\n            class=\"w-1/2 px-4 py-2 rounded-md bg-black text-white hover:bg-gray-900 focus:outline-none mr-2 disabled:opacity-75 disabled:cursor-not-allowed\"\n            onClick={generate}\n            >\n            Generate\n            </button>\n            <button\n            id=\"stopBtn\"\n            class=\"w-1/2 px-4 py-2 rounded-md border border-gray-500 text-gray-500 hover:text-gray-700 hover:border-gray-700 focus:outline-none ml-2 disabled:opacity-75 disabled:cursor-not-allowed\"\n            onClick={stop}\n            >\n            Stop\n            </button>\n        </div>\n        </div>\n    );\n};\n\nexport default Stream;",{"ruleId":"99","severity":1,"message":"100","line":7,"column":8,"nodeType":"101","messageId":"102","endLine":7,"endColumn":14},{"ruleId":"99","severity":1,"message":"103","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":22,"column":49,"nodeType":"106","messageId":"107","endLine":22,"endColumn":51},{"ruleId":"108","severity":1,"message":"109","line":50,"column":19,"nodeType":"110","endLine":50,"endColumn":38},{"ruleId":"111","severity":1,"message":"112","line":90,"column":13,"nodeType":"110","endLine":90,"endColumn":131},{"ruleId":"111","severity":1,"message":"112","line":91,"column":13,"nodeType":"110","endLine":91,"endColumn":111},{"ruleId":"113","severity":1,"message":"114","line":75,"column":10,"nodeType":"115","endLine":75,"endColumn":21,"suggestions":"116"},{"ruleId":"99","severity":1,"message":"117","line":109,"column":21,"nodeType":"101","messageId":"102","endLine":109,"endColumn":31},{"ruleId":"99","severity":1,"message":"118","line":110,"column":12,"nodeType":"101","messageId":"102","endLine":110,"endColumn":16},{"ruleId":"99","severity":1,"message":"119","line":110,"column":18,"nodeType":"101","messageId":"102","endLine":110,"endColumn":25},{"ruleId":"99","severity":1,"message":"120","line":111,"column":12,"nodeType":"101","messageId":"102","endLine":111,"endColumn":18},{"ruleId":"99","severity":1,"message":"121","line":111,"column":20,"nodeType":"101","messageId":"102","endLine":111,"endColumn":29},{"ruleId":"99","severity":1,"message":"122","line":124,"column":13,"nodeType":"101","messageId":"102","endLine":124,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":75,"column":10,"nodeType":"115","endLine":75,"endColumn":21,"suggestions":"123"},{"ruleId":"99","severity":1,"message":"124","line":77,"column":12,"nodeType":"101","messageId":"102","endLine":77,"endColumn":20},{"ruleId":"99","severity":1,"message":"125","line":77,"column":22,"nodeType":"101","messageId":"102","endLine":77,"endColumn":33},{"ruleId":"99","severity":1,"message":"117","line":109,"column":21,"nodeType":"101","messageId":"102","endLine":109,"endColumn":31},{"ruleId":"99","severity":1,"message":"118","line":110,"column":12,"nodeType":"101","messageId":"102","endLine":110,"endColumn":16},{"ruleId":"99","severity":1,"message":"119","line":110,"column":18,"nodeType":"101","messageId":"102","endLine":110,"endColumn":25},{"ruleId":"99","severity":1,"message":"122","line":123,"column":13,"nodeType":"101","messageId":"102","endLine":123,"endColumn":21},{"ruleId":"99","severity":1,"message":"103","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":67,"column":13,"nodeType":"110","endLine":72,"endColumn":58},{"ruleId":"111","severity":1,"message":"112","line":77,"column":13,"nodeType":"110","endLine":82,"endColumn":66},{"ruleId":"111","severity":1,"message":"112","line":87,"column":13,"nodeType":"110","endLine":92,"endColumn":71},{"ruleId":"99","severity":1,"message":"126","line":5,"column":10,"nodeType":"101","messageId":"102","endLine":5,"endColumn":22},{"ruleId":"113","severity":1,"message":"127","line":20,"column":6,"nodeType":"115","endLine":20,"endColumn":8,"suggestions":"128"},{"ruleId":"99","severity":1,"message":"103","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":26},{"ruleId":"99","severity":1,"message":"129","line":8,"column":11,"nodeType":"101","messageId":"102","endLine":8,"endColumn":22},{"ruleId":"99","severity":1,"message":"130","line":9,"column":11,"nodeType":"101","messageId":"102","endLine":9,"endColumn":18},"no-unused-vars","'Stream' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkVariables'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'setLoading' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'stream' is assigned a value but never used.","'setStream' is assigned a value but never used.","'contents' is assigned a value but never used.",["132"],"'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'stopsequence' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'compare'. Either include it or remove the dependency array.",["133"],"'generateBtn' is assigned a value but never used.","'stopBtn' is assigned a value but never used.",{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [checkVariables, userInput]",{"range":"139","text":"140"},{"range":"141","text":"140"},"Update the dependencies array to be: [compare]",{"range":"142","text":"143"},[2142,2153],"[checkVariables, userInput]",[2157,2168],[702,704],"[compare]"]